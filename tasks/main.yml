---
- name: Install required packages
  loop:
    - ufw
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  tags:
    - firewall

- name: Write before rules
  when: firewall_before_rules is not none
  notify:
    - reload firewall
  ansible.builtin.copy:
    content: "{{ firewall_before_rules }}"
    dest: /etc/ufw/before.rules
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  tags:
    - firewall

- name: Write after rules
  when: firewall_after_rules is not none
  notify:
    - reload firewall
  ansible.builtin.copy:
    content: "{{ firewall_after_rules }}"
    dest: /etc/ufw/after.rules
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  tags:
    - firewall

- name: Write before6 rules
  when: firewall_before6_rules is not none
  notify:
    - reload firewall
  ansible.builtin.copy:
    content: "{{ firewall_before6_rules }}"
    dest: /etc/ufw/before6.rules
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  tags:
    - firewall

- name: Write after6 rules
  when: firewall_after6_rules is not none
  notify:
    - reload firewall
  ansible.builtin.copy:
    content: "{{ firewall_after6_rules }}"
    dest: /etc/ufw/after6.rules
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  tags:
    - firewall

- name: Set incoming policy
  community.general.ufw:
    direction: incoming
    policy: "{{ firewall_incoming_policy }}"
  tags:
    - firewall

- name: Set outgoing policy
  community.general.ufw:
    direction: outgoing
    policy: "{{ firewall_outgoing_policy }}"
  tags:
    - firewall

- name: Allow whitelisat ips
  loop: "{{ firewall_allow_ips }}"
  community.general.ufw:
    rule: allow
    src: "{{ item.src | default(item) }}"
    proto: "{{ item.proto | default('any') }}"
  tags:
    - firewall

- name: Define ssh rule
  when: firewall_ssh_enabled
  community.general.ufw:
    rule: "{{ firewall_ssh_rule }}"
    port: "{{ firewall_ssh_port }}"
    proto: tcp
  tags:
    - firewall

- name: Define https rule
  when: firewall_https_enabled
  community.general.ufw:
    rule: "{{ firewall_https_rule }}"
    port: "{{ firewall_https_port }}"
    proto: tcp
  tags:
    - firewall

- name: Define http rule
  when: firewall_http_enabled
  community.general.ufw:
    rule: "{{ firewall_http_rule }}"
    port: "{{ firewall_http_port }}"
    proto: tcp
  tags:
    - firewall

- name: Define additional rules
  with_items: "{{ firewall_rules_general + firewall_rules_extra }}"
  community.general.ufw:
    rule: "{{ item.rule }}"
    port: "{{ item.port }}"
    proto: "{{ item.proto | default('any') }}"
    direction: "{{ item.direction | default('in') }}"
    from_ip: "{{ item.from_ip | default('any') }}"
    from_port: "{{ item.from_port | default('') }}"
    to_ip: "{{ item.to_ip | default('any') }}"
    to_port: "{{ item.to_port | default('') }}"
  tags:
    - firewall

- name: Define logging enabled
  community.general.ufw:
    logging: "{{ firewall_logging }}"
  tags:
    - firewall

- name: Enable ufw firewall
  community.general.ufw:
    state: enabled
  tags:
    - firewall

...
